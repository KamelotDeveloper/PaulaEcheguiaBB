---
const images = [
  "/1a.webp",
  "/2a.webp",
  "/3a.webp",
  "/4a.webp",
  "/5a.webp",
  "/6a.webp",
];
// Velocidad espec칤fica para este carrusel
const speed = 3000; // 游녣 Cambi치 este valor sin afectar a los otros
---
<div class="carousel relative overflow-hidden w-full flex flex-col items-center" data-speed={speed}>
  <!-- Pista de im치genes -->
  <div class="carousel-track flex transition-transform duration-700 ease-in-out w-full">
    {images.map((src) => (
      <div class="w-full flex-shrink-0 flex justify-center items-center">
        <img
          src={src}
          alt="Galer칤a"
          class="max-h-80 w-auto object-contain"
        />
      </div>
    ))}
  </div>

  <!-- Dots de navegaci칩n manual -->
  <div class="carousel-dots flex gap-2 mt-3">
    {images.map((_, i) => (
      <button
        class="h-2 w-2 rounded-full bg-gray-400 data-[active=true]:bg-[#d4ae6d] transition-colors"
        data-index={i}
        aria-label={`Ir a imagen ${i + 1}`}
      ></button>
    ))}
  </div>
</div>

<script>
  // Encapsular dentro de un IIFE para que este script
  // act칰e solo sobre este componente
  (() => {
    const carousel = document.currentScript.closest(".carousel");
    const track = carousel.querySelector(".carousel-track");
    const dots = carousel.querySelectorAll(".carousel-dots button");
    if (!track || !dots.length) return;

    const slides = track.children.length;
    const speed = parseInt(carousel.dataset.speed) || 3000;
    let index = 0;
    let interval;

    function goToSlide(i) {
      index = (i + slides) % slides;
      track.style.transform = `translateX(-${index * 100}%)`;
      dots.forEach((d, idx) => (d.dataset.active = idx === index));
    }

    function startAuto() {
      interval = setInterval(() => goToSlide(index + 1), speed);
    }
    function stopAuto() {
      clearInterval(interval);
    }

    // Dots manuales
    dots.forEach((dot, i) => {
      dot.addEventListener("click", () => {
        stopAuto();
        goToSlide(i);
        startAuto();
      });
    });

    // Swipe en m칩vil
    let startX = 0;
    track.addEventListener("touchstart", (e) => {
      if (!e.touches?.[0]) return;
      stopAuto();
      startX = e.touches[0].clientX;
    });
    track.addEventListener("touchend", (e) => {
      if (!e.changedTouches?.[0]) return;
      const diff = startX - e.changedTouches[0].clientX;
      if (diff > 50) goToSlide(index + 1);
      else if (diff < -50) goToSlide(index - 1);
      startAuto();
    });

    goToSlide(0);
    startAuto();
  })();
</script>
